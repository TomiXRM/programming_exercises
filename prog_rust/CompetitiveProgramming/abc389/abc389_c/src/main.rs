// https://atcoder.jp/contests/abc389/tasks/abc389_c
use std::collections::VecDeque;
use std::io;

const DEBUG: bool = false;
fn main() {
    let mut s = String::new();
    io::stdin().read_line(&mut s).expect("Fail to read");
    let q = s.trim().parse::<u128>().unwrap();

    let mut snake_list: VecDeque<(u128, u128)> = VecDeque::new(); // Èï∑„Åï,Pos

    // let mut query: Vec<usize> = Vec::new();
    let mut s = String::new();
    for _ in 0..q {
        s.clear();
        io::stdin().read_line(&mut s).expect("Fail to read");

        // println!("s:{}",s);
        let mut iter = s.split_whitespace();
        let q_pattern = iter.next().unwrap().parse::<u128>().unwrap();
        match q_pattern {
            1 => {
                if DEBUG {
                    println!("üçï");
                }
                let l = iter.next().unwrap().parse::<u128>().unwrap();
                // println!("{:?}",l);

                // Èï∑„Åïl„ÅÆ„Éò„Éì„ÇíÊú´Â∞æ„Å´ËøΩÂä†
                if snake_list.len() == 0 {
                    // ÂÖÉ„ÅÆÂàó„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂ∫ßÊ®ô 0„Å∏
                    snake_list.push_back((l, 0)); // Èï∑„Åï,Pos
                } else {
                    let (len, pos) = snake_list.iter().next_back().expect("„É™„Çπ„Éà„ÅåÁ©∫„Åã„ÇÇ");
                    snake_list.push_back((l, pos + len)); // Èï∑„Åï,Pos
                }
            }
            2 => {
                if DEBUG {
                    println!("üçü");
                }
                let (len, _) = snake_list.pop_front().expect("„Å∏„Å≥„Åä„Çâ„Åö");
                for snake in snake_list.iter_mut() {
                    snake.1 -= len;
                }
            }
            3 => {
                if DEBUG {
                    println!("üç£");
                }
                let k = iter.next().unwrap().parse::<u128>().unwrap();
                // println!("{:?}",k);

                let (_, pos) = snake_list[(k - 1) as usize];
                println!("{}", pos);
            }
            _ => {}
        }
        if DEBUG {
            println!("{:?}", snake_list);
        }
    }
}
